pipeline {
    agent any

    tools {
        maven 'Maven 3.8.5'
        jdk 'JDK 11'
    }

    environment {
        ARTIFACTORY_SERVER_ID = 'jfrog-ids' // This is the ID you configured
    }

    parameters {
        string(name: 'GIT_URL', defaultValue: 'https://github.com/Issak-2005/public-java-repo.git', description: 'Git repository URL')
        string(name: 'GIT_BRANCH', defaultValue: 'add-license-1', description: 'Branch to build')
    }

    stages {
        stage('Clone Repo') {
            steps {
                git branch: "${params.GIT_BRANCH}",
                    credentialsId: 'github-cred-id',
                    url: "${params.GIT_URL}"
            }
        }

        stage('Build & Deploy') {
            steps {
                script {
                    // Load Artifactory server object using the correct Jenkins step
                    def server = rtServer (
                        id: "${ARTIFACTORY_SERVER_ID}"
                    )

                    def rtMaven = rtMavenResolver (
                        tool: 'Maven 3.8.5',
                        resolver: [
                            serverId: ARTIFACTORY_SERVER_ID,
                            releaseRepo: 'my-java-app-libs-release',
                            snapshotRepo: 'my-java-app-libs-snapshot'
                        ],
                        deployer: [
                            serverId: ARTIFACTORY_SERVER_ID,
                            releaseRepo: 'my-java-app-libs-release',
                            snapshotRepo: 'my-java-app-libs-snapshot'
                        ]
                    )

                    def buildInfo = rtMavenRun (
                        tool: 'Maven 3.8.5',
                        pom: 'pom.xml',
                        goals: 'clean install deploy',
                        buildInfo: true
                    )

                    server.publishBuildInfo buildInfo
                }
            }
        }
    }
}
